"""
	mechcalc, mechanical engineering tools.
    Copyright (C) 2020, Chuck McKyes

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.3 on Thu Apr 23 11:59:03 2020
#

import wx


class Power(wx.Panel):
    def __init__(self, notebook, wx_id, style):
        super().__init__(notebook, wx_id, style=style)

        # for Power calculation
        self.text_ctrl_torque_in = wx.TextCtrl(self, wx.ID_ANY, "20")
        self.text_ctrl_rpm2_in = wx.TextCtrl(self, wx.ID_ANY, "1800")
        self.text_ctrl_power_out = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.text_ctrl_power_out_metric = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY)

        # Bind event handlers
        self.text_ctrl_torque_in.Bind(wx.EVT_TEXT, self.on_power_calculate)
        self.text_ctrl_rpm2_in.Bind(wx.EVT_TEXT, self.on_power_calculate)

        self.__set_properties()
        self.__do_layout()

    def __set_properties(self):
        pass
        # begin wxGlade: MyFrame.__set_properties
        # only the top text control in the column needs a minsize
        self.text_ctrl_torque_in.SetMinSize((160, 34))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        grid_sizer_2 = wx.FlexGridSizer(5, 3, 4, 4)
        grid_sizer_2.Add((0, 0), 0, 0, 0)
        label_11 = wx.StaticText(self, wx.ID_ANY, "Power")
        label_11.SetMinSize((160, 40))
        grid_sizer_2.Add(label_11, 0, wx.EXPAND, 0)
        grid_sizer_2.Add((0, 0), 0, 0, 0)
        label_12 = wx.StaticText(self, wx.ID_ANY, "Torque", style=wx.ALIGN_RIGHT)
        label_12.SetMinSize((80, 34))
        grid_sizer_2.Add(label_12, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.text_ctrl_torque_in, 0, wx.EXPAND, 0)
        label_13 = wx.StaticText(self, wx.ID_ANY, u"ft\u2022lbf")
        grid_sizer_2.Add(label_13, 0, 0, 0)
        label_14 = wx.StaticText(self, wx.ID_ANY, "rpm", style=wx.ALIGN_RIGHT)
        label_14.SetMinSize((80, 34))
        grid_sizer_2.Add(label_14, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.text_ctrl_rpm2_in, 0, wx.EXPAND, 0)
        grid_sizer_2.Add((0, 0), 0, 0, 0)
        label_15 = wx.StaticText(self, wx.ID_ANY, "Power", style=wx.ALIGN_RIGHT)
        label_15.SetMinSize((80, 34))
        grid_sizer_2.Add(label_15, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.text_ctrl_power_out, 0, wx.EXPAND, 0)
        label_16 = wx.StaticText(self, wx.ID_ANY, "horsepower")
        grid_sizer_2.Add(label_16, 0, 0, 0)
        label_17 = wx.StaticText(self, wx.ID_ANY, "Power", style=wx.ALIGN_RIGHT)
        label_17.SetMinSize((80, 34))
        grid_sizer_2.Add(label_17, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.text_ctrl_power_out_metric, 0, wx.EXPAND, 0)
        label_18 = wx.StaticText(self, wx.ID_ANY, "kilowatt")
        grid_sizer_2.Add(label_18, 0, 0, 0)
        # end Power calculation

        self.SetSizer(grid_sizer_2)
        self.Layout()
        # end wxGlade

    def on_power_calculate(self, event):   # event handler
        """
        Numbers are entered into power and rpm2 fields. Non-numbers
        will not be accepted. Calculation is automatic upon entering
        valid numbers.
        """
        torque = 0  # to prevent accessing variables before assignment
        rpm2 = 0
        str_torque = (self.text_ctrl_torque_in.GetValue())
        acceptable_characters = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.']

        # If a character entered causes an error, then delete it from the text control
        if str_torque:
            # if there are two decimals, delete the last one
            counter = 0
            for character in str_torque:
                print(character)
                if character == ".":
                    counter += 1
            if counter > 1:
                str_torque = str_torque[0:-1]
                self.text_ctrl_torque_in.SetValue(str_torque)
            # If the entry is too long, delete last character
            if len(str_torque) > 8:
                str_torque = str_torque[0:-1]
                self.text_ctrl_torque_in.SetValue(str_torque)
            if not (str_torque[-1:] in acceptable_characters):
                str_torque = str_torque[0:-1]
                self.text_ctrl_torque_in.SetValue(str_torque)
            try:
                torque = float(str_torque)
            # This prevents more than one decimal "."
            except ValueError:
                print("Invalid input")
                return

        str_rpm2 = (self.text_ctrl_rpm2_in.GetValue())
        if str_rpm2:
            # if there are two decimals, delete the last one
            counter = 0
            for character in str_rpm2:
                if character == ".":
                    counter += 1
            if counter > 1:
                str_rpm2 = str_rpm2[0:-1]
                self.text_ctrl_rpm2_in.SetValue(str_rpm2)
            # If the entry is too long, delete last character
            if len(str_rpm2) > 8:
                str_rpm2 = str_rpm2[0:-1]
                self.text_ctrl_rpm2_in.SetValue(str_rpm2)
            if not (str_rpm2[-1:] in acceptable_characters):
                str_rpm2 = str_rpm2[0:-1]
                self.text_ctrl_rpm2_in.SetValue(str_rpm2)
            try:
                rpm2 = float(str_rpm2)
            except ValueError:
                print("Invalid input")
                return

        if torque and rpm2:
            power = torque * rpm2 / 5252
            power_metric = power * 0.746
            power = "{0:.2f}".format(power)
            self.text_ctrl_power_out.SetValue(power)
            power_metric = "{0:.2f}".format(power_metric)
            self.text_ctrl_power_out_metric.SetValue(power_metric)
        else:
            self.text_ctrl_power_out.SetValue("")
            self.text_ctrl_power_out_metric.SetValue("")
# end class Power
