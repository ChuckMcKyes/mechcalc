"""
	mechcalc, mechanical engineering tools.
    Copyright (C) 2020, Chuck McKyes

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.3 on Thu Apr 23 11:59:03 2020
#

import wx


class PumpPower(wx.Panel):
    def __init__(self, notebook, wx_id, style):
        super().__init__(notebook, wx_id, style=style)

        # for Pump Power calculation
        self.text_ctrl_flow_in = wx.TextCtrl(self, wx.ID_ANY, "20")
        self.text_ctrl_head_in = wx.TextCtrl(self, wx.ID_ANY, "100")
        self.text_ctrl_power_out = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY)
        self.text_ctrl_power_out_metric = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_READONLY)

        self.text_ctrl_flow_in.Bind(wx.EVT_TEXT, self.on_power_calculate)
        self.text_ctrl_head_in.Bind(wx.EVT_TEXT, self.on_power_calculate)

        self.__set_properties()
        self.__do_layout()

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        # only the top text control in the column needs a minsize
        self.text_ctrl_flow_in.SetMinSize((160, 34))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        # main panel sizer
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        # start power calculation
        grid_sizer_1 = wx.FlexGridSizer(5, 3, 4, 4)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_1 = wx.StaticText(self, wx.ID_ANY, "Pump Power")
        label_1.SetMinSize((160, 40))
        grid_sizer_1.Add(label_1, 0, wx.EXPAND, 0)
        grid_sizer_1.Add((0, 0), 0, 0, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, "Flow", style=wx.ALIGN_RIGHT)
        label_2.SetMinSize((160, 34))
        grid_sizer_1.Add(label_2, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.text_ctrl_flow_in, 0, wx.EXPAND, 0)
        label_3 = wx.StaticText(self, wx.ID_ANY, "USgpm")
        grid_sizer_1.Add(label_3, 0, 0, 0)
        label_4 = wx.StaticText(self, wx.ID_ANY, "Head", style=wx.ALIGN_RIGHT)
        label_4.SetMinSize((160, 34))
        grid_sizer_1.Add(label_4, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.text_ctrl_head_in, 0, wx.EXPAND, 0)
        label_41 = wx.StaticText(self, wx.ID_ANY, "feet")
        label_41.SetMinSize((160, 34))
        grid_sizer_1.Add(label_41, 0, wx.EXPAND, 0)
        label_5 = wx.StaticText(self, wx.ID_ANY, "Hydraulic Power", style=wx.ALIGN_RIGHT)
        label_5.SetMinSize((160, 34))
        grid_sizer_1.Add(label_5, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.text_ctrl_power_out, 0, wx.EXPAND, 0)
        label_6 = wx.StaticText(self, wx.ID_ANY, "hp")
        grid_sizer_1.Add(label_6, 0, 0, 0)
        label_7 = wx.StaticText(self, wx.ID_ANY, "Power", style=wx.ALIGN_RIGHT)
        label_7.SetMinSize((160, 34))
        grid_sizer_1.Add(label_7, 0, wx.EXPAND, 0)
        grid_sizer_1.Add(self.text_ctrl_power_out_metric, 0, wx.EXPAND, 0)
        label_8 = wx.StaticText(self, wx.ID_ANY, "kW")
        grid_sizer_1.Add(label_8, 0, 0, 0)
        sizer_1.Add(grid_sizer_1, 0, wx.EXPAND, 0)
        # end Power calculation

        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def on_power_calculate(self, event):  # wxGlade: MyFrame.<event_handler>
        """
        Numbers are entered into flow and head fields. Non-numbers
        will not be accepted. Calculation is automatic upon entering
        valid numbers.
        """
        flow = 0    # to prevent accessing variables before assignment
        head = 0
        str_flow = (self.text_ctrl_flow_in.GetValue())
        acceptable_characters = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.']

        # If a character entered causes an error, then delete it from the text control
        if str_flow:
            # if there are two decimals, delete the last one
            counter = 0
            for character in str_flow:
                print(character)
                if character == ".":
                    counter += 1
            if counter > 1:
                str_flow = str_flow[0:-1]
                self.text_ctrl_flow_in.SetValue(str_flow)
            # If the entry is too long, delete last character
            if len(str_flow) > 8:
                str_flow = str_flow[0:-1]
                self.text_ctrl_flow_in.SetValue(str_flow)
            if not (str_flow[-1:] in acceptable_characters):
                str_flow = str_flow[0:-1]
                self.text_ctrl_flow_in.SetValue(str_flow)
            try:
                flow = float(str_flow)
            # This prevents more than one decimal "."
            except ValueError:
                print("Invalid input")
                return

        str_head = (self.text_ctrl_head_in.GetValue())
        if str_head:
            # if there are two decimals, delete the last one
            counter = 0
            for character in str_head:
                if character == ".":
                    counter += 1
            if counter > 1:
                str_head = str_head[0:-1]
                self.text_ctrl_head_in.SetValue(str_head)
            # If the entry is too long, delete last character
            if len(str_head) > 8:
                str_head = str_head[0:-1]
                self.text_ctrl_head_in.SetValue(str_head)
            if not (str_head[-1:] in acceptable_characters):
                str_head = str_head[0:-1]
                self.text_ctrl_head_in.SetValue(str_head)
            try:
                head = float(str_head)
            except ValueError:
                print("Invalid input")
                return

        if flow and head:
            power = flow * head / 3960
            power_metric = power * 0.746
            power = "{0:.2f}".format(power)
            self.text_ctrl_power_out.SetValue(power)
            power_metric = "{0:.2f}".format(power_metric)
            self.text_ctrl_power_out_metric.SetValue(power_metric)
        else:
            self.text_ctrl_power_out.SetValue("")
            self.text_ctrl_power_out_metric.SetValue("")

# end class PumpPower
